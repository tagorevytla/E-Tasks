package arris.bitwise.wsclient.service;

import com.twowire.dmc.apps.nbiws.base.v1_0.NameValuePair;
import com.twowire.dmc.apps.nbiws.base.v1_0.SerialNumberAndOUIDeviceSelector;
import com.twowire.dmc.apps.nbiws.base.v1_0.TimeUnit;
import com.twowire.dmc.apps.nbiws.base.v1_0.TimeWithUnits;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.ws.client.core.WebServiceTemplate;

import com.twowire.dmc.apps.nbiws.devicemgmt.v1_0.*;

import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URL;
import java.net.URLClassLoader;
import java.security.KeyStore;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.*;
import java.util.Date;
import java.util.Calendar;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import java.util.GregorianCalendar;
import com.google.common.base.Charsets;
import com.google.common.io.Files;

@RestController
public class ECOClientService {

    private static Logger LOG = LoggerFactory.getLogger(ECOClientService.class);
    
    @Value(value = "classpath:resources/deviceData.txt")
	private Resource data;
	
	
//	

    @Autowired
    private WebServiceTemplate webServiceTemplate;

    SSLContext sslcontext;

    private void setSecurity() {

        try {
            sslcontext = SSLContext.getInstance("TLS");

            KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());
            char[] password = "changeit".toCharArray();
            char[] keyPassword = "changeit".toCharArray();
            File jks = new File("/opt/arris/dmc-ws/webservice_att_isaac.jks");

            InputStream fileIn = new FileInputStream(jks);

            keystore.load(fileIn,password);
            fileIn.close();

            KeyManagerFactory keyFactory = KeyManagerFactory.getInstance("SunX509");
            keyFactory.init(keystore,keyPassword);

            TrustManager[] trustmanagers = {new TautologicalX509TrustManager()};
            sslcontext.init(keyFactory.getKeyManagers(), trustmanagers, null);

            System.setProperty("javax.net.ssl.keyStore",jks.getPath());
            System.setProperty("javax.net.ssl.keyStorePassword","changeit");
            System.setProperty("javax.net.ssl.trustStore",jks.getPath());
            System.setProperty("javax.net.ssl.trustStorePassword","changeit");

            LOG.info("JKS File Imported");
        }
        catch (Exception e) {
            LOG.error("ERROR",e);
        }
    }

    @RequestMapping("/device/{oui}/{serial}")
    public Device getRestDevice(@PathVariable String oui, @PathVariable String serial) {

        return getDevice(oui, serial);
    }

    @RequestMapping("/device/parameters/{oui}/{serial}")
    public TRData getRestDeviceParameters(@PathVariable String oui, @PathVariable String serial) {

        List<String> requestedParameters = new ArrayList<>();

        requestedParameters.add("InternetGatewayDevice.LANDevice.1.WLANConfiguration.");

        List<NameValuePair> valuePairs = getDeviceParameters(oui, serial, requestedParameters);

        Map<String, String> trDataMap = new HashMap<>();

        valuePairs.forEach(r -> trDataMap.putIfAbsent(r.getName(), r.getValue()));

        TRData trData = new TRData();

        trData.setOuiSerial(oui + "-" + serial);
        trData.setTrData(trDataMap);
        System.out.println(valuePairs.size()+"----------------------------------------------------");
        return trData;
    }


    public Device getDevice(String oui, String serialNumber) {
    	
    	Device device = new Device();
    	
    	Date d = new Date();
        GregorianCalendar c = new GregorianCalendar();
        XMLGregorianCalendar date2 = null;
        c.setTime(d);
        try {

            date2 = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
            System.out.println(date2);

        
        } catch (DatatypeConfigurationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            
        }
    	
    
    	device.setOui("00D09E");
    	device.setSerialNumber("0000001000");
    	device.setManufacturerName("2Wire");
    	device.setModelDescription("260-2173300");        
    	//device.setFirstInform("Monday Nov 28 2017 03:18:14 PM (GMT)");
    	device.setLastInform(date2);
    	device.setModelName("5268AC");
    	device.setProductClass("homeportal");
    	device.setProvisioningCode("52HP-2374-2262-22AT-F2BQ");
    	device.setHardwareVersion("260-2173300");
    	device.setSoftwareVersion("10.5.6.529454-att");
    	device.setMacAddress("14:ED:BB:94:07:64");
    	device.setWANIPAddress("172:16:2.119");
    	
    	
//    	private String oui;
//    	private String serialNumber;
//    	
//    	public String getoui() {
//    		
//    		return this.oui;
//    	}
//    	
//    	public String setoui(String oui) {
//    		
//    		return this.oui = oui;
//    	}
//    	
//    	public String getserialNumber() {
//    		
//    		return this.serialNumber;
//    	
//    	}
//    	
//    	public String setserialNumber(String serialNumber) {
//    		
//    		return this.serialNumber = serialNumber;
//    	}
//
//        setSecurity();
//
//        Device device = null;
//        GetDevicesResponse response = null;
//
//        GetDevicesRequest devicesRequest = new GetDevicesRequest();
//
//        SerialNumberAndOUIDeviceSelector selector = new SerialNumberAndOUIDeviceSelector();
//
//        selector.setOui(oui);
//        selector.setSerialNumber(serialNumber);
//        devicesRequest.setDeviceSelector(selector);
//
//        try {
//            response = (GetDevicesResponse) this.webServiceTemplate.marshalSendAndReceive(devicesRequest);
//        } catch (Exception ex) {
//            LOG.error("Call to Get Device {} failed with exception: {}", serialNumber, ex.getMessage());
//        }
//
//        if (response != null){
//            List<Device> deviceList = response.getDevices();
//            if (deviceList != null && deviceList.size()>0){
//                if (deviceList.size() > 1){
//                    throw new RuntimeException ("Found multiple devices for oui " + oui + " and serialNumber " + serialNumber);
//                } else {
//                    device = deviceList.get(0);
//                }
//            }
//        }

        return device;
    }

    public List<NameValuePair> getDeviceParameters(String oui, String serialNumber, List<String> requestedParameters) {

//        setSecurity();
//
//        List<NameValuePair> valuePairs = null;
//        GetDeviceParameterValuesResponse response = null;
//
//        GetDeviceParameterValuesRequest deviceParameterValuesRequest = new GetDeviceParameterValuesRequest();
//
//        //Create & Assign Device Selector
//        SerialNumberAndOUIDeviceSelector selector = new SerialNumberAndOUIDeviceSelector();
//        selector.setOui(oui);
//        selector.setSerialNumber(serialNumber);
//        deviceParameterValuesRequest.setDeviceSelector(selector);
//
//        //Get Reference to ParameterNames & Populate
//        List<String> deviceParameterList = deviceParameterValuesRequest.getParameterNames();
//        deviceParameterList.addAll(requestedParameters);
//
//        //Create & Assign TimeWithUnits for GPV Timeout
//        TimeWithUnits timeWithUnits = new TimeWithUnits();
//        timeWithUnits.setUnits(TimeUnit.SECONDS);
//        timeWithUnits.setValue(120);
//        deviceParameterValuesRequest.setTimeout(timeWithUnits);
//
//        Long start = System.currentTimeMillis();
//
//        try{
//            response = (GetDeviceParameterValuesResponse) this.webServiceTemplate.marshalSendAndReceive(deviceParameterValuesRequest);
//        } catch (Exception ex) {
//            LOG.error("Call to GPV Device {} failed with exception: {}", serialNumber, ex.getMessage());
//        }
//
//        if (response != null){
//            valuePairs = response.getParameterValues();
//        }
       return test();
   }
    	
	List<NameValuePair> test() {
		
		
		// ClassLoader classLoader = getClass().getClassLoader();
		// File("/bitwsie/bit-dmc-ws-client/src/main/resources/deviceData.txt");
		List<NameValuePair> keyVal = new ArrayList();
//		URL url = Resources.getResource("deviceData.txt");
//		String text = Resources.toString(url, Charsets.UTF_8);
////		
		
		try {
//			File file =  new File( ECOClientService.class.getResource( "/deviceData.txt" ).getPath());
			BufferedReader br = new BufferedReader(new FileReader(text));
			String line;
			while ((line = br.readLine()) != null) {
				String data[] = line.split("=");
				if (data.length == 2) {// keyVal.put(data[0], data[1]);
					NameValuePair n = new NameValuePair();
					n.setName(data[0]);
					n.setValue(data[1]);
					keyVal.add(n);
				}
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
            //System.out.println(keyVal.length());
            return keyVal;
            

        }

    public WebServiceTemplate getWebServiceTemplate() {
        return webServiceTemplate;
    }

    public void setWebServiceTemplate(WebServiceTemplate webServiceTemplate) {
        this.webServiceTemplate = webServiceTemplate;
    }
}
